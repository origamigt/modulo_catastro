-- FUNCTION: sgm_historico.emision_individual(integer, integer, bigint)

-- DROP FUNCTION sgm_historico.emision_individual(integer, integer, bigint);

CREATE OR REPLACE FUNCTION sgm_historico.emision_individual(
	n_anio integer,
	n_codigo integer,
	n_predio bigint)
    RETURNS integer
    LANGUAGE 'plpgsql'
    COST 100.0
    VOLATILE NOT LEAKPROOF 
AS $function$


DECLARE
--CURSORES
	C_CPREDIO CURSOR(NPREDIO BIGINT) FOR SELECT P.*, HV.AVALUO_SOLAR, HV.AVALUO_EDIFICACION, HV.AVALUO_MUNICIPAL 
		FROM sgm_app.CAT_PREDIO P 
		INNER JOIN sgm_historico.VALORACION_PREDIAL HV ON HV.NUM_PREDIO = P.NUM_PREDIO
		WHERE P.NUM_PREDIO = NPREDIO AND P.ESTADO = 'A'
		AND HV.NUM_VERSION = n_codigo AND HV.PERIODO = n_anio;

	C_DATOS_VALORACION CURSOR(NPREDIO BIGINT, XPERIODO INTEGER) FOR SELECT * FROM sgm_historico.VALORACION_PREDIAL PX WHERE PX.PERIODO = XPERIODO AND PX.NUM_PREDIO = NPREDIO;
	
	C_PM CURSOR(NSECTOR INTEGER, NMZ INTEGER, NCDLA INTEGER, NMZDIV INTEGER, NSOLAR INTEGER, ND1 INTEGER, ND2 INTEGER, ND3 INTEGER, ND4 INTEGER, ND5 INTEGER, ND6 INTEGER, ND7 INTEGER, ND8 INTEGER, ND9 INTEGER) FOR
		SELECT P.*, HV.AVALUO_SOLAR, HV.AVALUO_EDIFICACION, HV.AVALUO_MUNICIPAL 
		FROM sgm_app.CAT_PREDIO P 
		INNER JOIN sgm_historico.VALORACION_PREDIAL HV ON HV.NUM_PREDIO = P.NUM_PREDIO AND NUM_VERSION = n_codigo AND HV.PERIODO = n_anio
		WHERE P.SECTOR = NSECTOR AND P.MZ = NMZ AND P.CDLA = NCDLA AND P.MZDIV = NMZDIV AND P.SOLAR = NSOLAR AND P.DIV1 = ND1 AND P.DIV2 = ND2 AND P.DIV3 = ND3 AND P.DIV4 = ND4 
		AND P.DIV5 = ND5 AND P.DIV6 = ND6 AND P.DIV7 = ND7 AND P.DIV8 = ND8 AND P.DIV9 = ND9 AND P.PHV = 0 AND P.PHH = 0 AND P.ESTADO = 'A';
	
	C_PREDIO_ENLACE CURSOR FOR SELECT E.NUM_PREDIO, EPH.CODIGO_MATRIZ FROM sgm_app.CAT_PREDIO E 
		INNER JOIN sgm_app.ENLACE_PH EPH ON EPH.NUM_PREDIO = E.NUM_PREDIO WHERE E.PHV > 0 AND E.PHH > 0;
	
	--C_CPREDIO CURSOR(NPREDIO BIGINT) FOR SELECT * FROM sgm_app.CAT_PREDIO P WHERE P.ESTADO = 'A' AND P.NUM_PREDIO = NPREDIO;

	C_DATOS_VALORACION_GENERAL CURSOR FOR SELECT * FROM sgm_historico.VALORACION_PREDIAL PX WHERE PX.NUM_VERSION = n_codigo AND PX.PERIODO = n_anio AND PX.MATRIZ = FALSE AND PX.NUM_PREDIO = n_predio;

	C_PREDIOS_SNE_ANT CURSOR(NPREDIO BIGINT) FOR 
		SELECT CP.NUM_PREDIO, CP.SUBSECTOR,CC.NOMBRE AS CIUDADELA, CP.AREA_SOLAR, (SELECT SUM(AREA_CONS_CENSO) FROM sgm_app.CAT_PREDIO_EDIFICACION PE WHERE PE.PREDIO = CP.ID) AS AREA_CONS
		FROM sgm_app.CAT_PREDIO CP 
			INNER JOIN sgm_app.CAT_CIUDADELA CC ON CC.ID = CP.CIUDADELA
			INNER JOIN sgm_financiero.REN_LIQUIDACION RL ON RL.PREDIO = CP.ID
			INNER JOIN sgm_financiero.REN_DET_LIQUIDACION D ON D.LIQUIDACION = RL.ID
			--INNER JOIN sgm_app.CAT_PREDIO_EDIFICACION PE ON PE.PREDIO = CP.ID
		WHERE RL.TIPO_LIQUIDACION = 13
			AND RL.ESTADO_LIQUIDACION IN (1,2)
			AND RL.ANIO = 2016
			AND D.RUBRO = 10
			AND CP.NUM_PREDIO = NPREDIO
			AND CP.AREA_SOLAR > 3000
			AND CP.ESTADO = 'A'
		ORDER BY 3 ASC;
	
--RECORDS 
	D_PMATRIZ RECORD;
	D_VALGEN RECORD;
	D_TEMP RECORD;
	D_PREDIO RECORD;
	D_PANT RECORD;
	D_PSNE RECORD;
--VARIABLES
	RESULTADO INTEGER :=0;
	VMATRIZ BIGINT;
	AVAL_SOLAR NUMERIC(14,4) := 0;
	AVAL_EDIF NUMERIC(14,4) := 0;
	AVAL_MUN NUMERIC(14,4) := 0;

	V100 NUMERIC(14,4) := 100;
	V1000 NUMERIC(14,4) := 1000;
	V025 NUMERIC(14,4) := 0.25;
	V5 NUMERIC(14,4) := 5;
	V015 NUMERIC(14,4) := 0.15;
	V001 NUMERIC(14,4) := 0.01;
	BIX NUMERIC(14,4) := 0;
	VSNE NUMERIC(14,4) := 0;
	IPACT NUMERIC(14,4) := 0;
	IPANT NUMERIC(14,4) := 0;
	VSECTOR NUMERIC(14,4) :=0;
	AVSOLANT NUMERIC(14,4) := 0;
	AVEDFANT NUMERIC(14,4) := 0;
	AVMUNANT NUMERIC(14,4) := 0;

	ID_LIQ BIGINT := NULL;
	V_CONT INTEGER := 0;
	V_CONT_N INTEGER := 0;
	V_CONT_M INTEGER := 0;
	V_CONT_EN INTEGER := 0;
	TIPOS CHARACTER VARYING(20);
	
BEGIN
	--ACTUALIZA Y CALCULA LOS AVALUOS RESPECTIVOS
	--REGISTRA LOS MOVIMIENTOS EN LAS LIQUIDACION CON LOS RUBROS PARA LA EMISION DE IMPUESTOS PREDIALES
	FOR D IN C_DATOS_VALORACION_GENERAL LOOP
		BIX := 0;
		VSNE:=0;
		IPACT:=0;
		IPANT:=0;
		AVSOLANT:=0;
		AVEDFANT:=0;
		AVMUNANT:=0;
		AVAL_SOLAR:=0;
		AVAL_EDIF:=0;
		AVAL_EDIF:=0;
		AVAL_MUN:=0;
		TIPOS:= NULL;
		OPEN C_CPREDIO(D.NUM_PREDIO);
		FETCH C_CPREDIO INTO D_PREDIO;
		IF(C_CPREDIO IS NOT NULL) THEN 
			SELECT T.FACT_ACT INTO VSECTOR FROM sgm_app.SECTOR_VALORIZACION T WHERE T.SECTOR = D_PREDIO.SUBSECTOR;
			--RAISE NOTICE 'FACT_ACT % ',VSECTOR;
			--CALCULA EL VALOR PARA LOS SOLARES NO EDIFICADOS
			VSNE:=0;
			IF((D.AVALUO_EDIFICACION = 0 OR D.AVALUO_EDIFICACION IS NULL)  AND D.NUMERO_MATRIZ IS NULL AND D.CANT_SERVICIOS > 4 AND (D_PREDIO.SECTOR > 2 AND D_PREDIO.SECTOR < 9)) THEN 				
				IF((D.AREA_SOLAR <= 3000)) THEN
					VSNE := ROUND((D.AVALUO_MUNICIPAL * 0.002),2);
					RAISE NOTICE 'SOLAR NO EDIFICADO %',VSNE;
				ELSE 
					OPEN C_PREDIOS_SNE_ANT(D_PREDIO.NUM_PREDIO);
					FETCH C_PREDIOS_SNE_ANT INTO D_PSNE;
					IF(C_PREDIOS_SNE_ANT IS NOT NULL AND (D_PSNE.AREA_CONS IS NULL OR D_PSNE.AREA_CONS = 0)) THEN
						VSNE := ROUND((D.AVALUO_MUNICIPAL * 0.002),2);
						RAISE NOTICE 'SOLAR NO EDIFICADO 2016 %',VSNE;
					END IF;
					CLOSE C_PREDIOS_SNE_ANT;
				END IF;
			END IF;
			--DATOS DEL PREDIO DE LA EMISION DEL PERIODO ANTERIOR
			OPEN C_DATOS_VALORACION(D_PREDIO.NUM_PREDIO, (n_anio-1));
			FETCH C_DATOS_VALORACION INTO D_PANT;
			IF(C_DATOS_VALORACION IS NOT NULL AND D_PANT.NUM_PREDIO IS NOT NULL) THEN
				IPANT := D_PANT.IP_ACT;
				AVSOLANT := D_PANT.AVALUO_SOLAR;
				AVEDFANT := D_PANT.AVALUO_EDIFICACION;
				AVMUNANT := D_PANT.AVALUO_MUNICIPAL;
				IF(D_PANT.AREA_CONSTRUCCION IS NOT NULL AND D_PANT.AREA_CONSTRUCCION > 0) THEN
					RAISE NOTICE '2016 AREAS %',D_PANT.AREA_CONSTRUCCION;
					IF( (((TRUNC(D.AREA_CONSTRUCCION) - TRUNC(D_PANT.AREA_CONSTRUCCION))<= 250 AND (TRUNC(D.AREA_CONSTRUCCION) - TRUNC(D_PANT.AREA_CONSTRUCCION)) >= -250)) 
					OR (((TRUNC(D_PANT.AREA_CONSTRUCCION) - TRUNC(D.AREA_CONSTRUCCION))<= 250) AND (TRUNC(D_PANT.AREA_CONSTRUCCION) - TRUNC(D.AREA_CONSTRUCCION))>= -250)

					AND (((TRUNC(D.AREA_SOLAR) - TRUNC(D_PANT.AREA_SOLAR)) <=500 AND (TRUNC(D.AREA_SOLAR) - TRUNC(D_PANT.AREA_SOLAR)) >=-500) OR 
					((TRUNC(D_PANT.AREA_SOLAR) - TRUNC(D.AREA_SOLAR)) <=500 AND (TRUNC(D_PANT.AREA_SOLAR) - TRUNC(D.AREA_SOLAR)) >=-500))) THEN
					RAISE NOTICE '2016 AREAS_SOLAR %',D_PANT.AREA_SOLAR;
					--OR (D.ALICUOTA > 0 AND D_PANT.IP_ACT > 0)) THEN
					        IF(D.ALICUOTA > 0 AND D_PANT.IP_ACT > 0) THEN
						     BIX := ROUND((((D_PANT.IP_ACT/D.AVALUO_MUNICIPAL)*VSECTOR)*V1000),2);
						     IF(BIX<V025) THEN
							BIX := V025;
						     ELSIF (BIX> V5) THEN
							BIX := V5;
						     END IF;
						     IPACT := ROUND((D.AVALUO_MUNICIPAL*BIX/V1000),2);
					 	     V_CONT_N := V_CONT_N + 1;
						     TIPOS:= 'PN';
						     RAISE NOTICE 'PNALIC % ',BIX||' IPACT '||IPACT||'  AVALUO '||D.AVALUO_MUNICIPAL;
						     RAISE NOTICE 'PNBIX % ',BIX;
						ELSE 
						    /*BIX :=1.5;
                                                    IPACT := ROUND((D.AVALUO_MUNICIPAL*BIX/V1000),2);
					 	    V_CONT_N := V_CONT_N + 1;*/
						    BIX := ROUND((((D_PANT.IP_ACT/D.AVALUO_MUNICIPAL)*VSECTOR)*V1000),2);
						     IF(BIX<V025) THEN
							BIX := V025;
						     ELSIF (BIX> V5) THEN
							BIX := V5;
						     END IF;
						     IPACT := ROUND((D.AVALUO_MUNICIPAL*BIX/V1000),2);
					 	     V_CONT_N := V_CONT_N + 1;
						    RAISE NOTICE 'CXXX %',D_PANT.NUM_VERSION;
                                                END IF;
					ELSE 
					--CALCULO DE LA BANDA PARA LAS EDIFICACIONES NUEVAS
					--AGREGAR LOS PREDIOS DE LAS INSPECCIONES FINALES
					IF(D_PANT.IP_ACT > 0) THEN					
						BIX := ROUND((((D_PANT.IP_ACT/D_PANT.AVALUO_MUNICIPAL))*V1000),2);
						IF(BIX<V025) THEN
							BIX := V025;
						ELSIF (BIX> V5) THEN
							BIX := V5;
						END IF;
					ELSE 
					        BIX := 1.5;
					END IF;
						IPACT := ROUND(((D.AVALUO_MUNICIPAL*BIX)/V1000),2);
						V_CONT_M := V_CONT_M + 1;
						TIPOS:= 'M';
						RAISE NOTICE 'M % ',BIX;
					END IF;
				ELSE 
				--CALCULO DE LA BANDA PARA LAS EDIFICACIONES NUEVAS
					--BIX = ((D_PANT.IP_ACT/D.AVALUO_MUNICIPAL)*VSECTOR)*V1000;
					IF(D.AREA_CONSTRUCCION > 0 AND D.NUMERO_MATRIZ IS NULL) THEN
                                                IF(D_PANT.IP_ACT > 0) THEN					
						   BIX := ROUND((((D_PANT.IP_ACT/D_PANT.AVALUO_MUNICIPAL))*V1000),2);
						   IF(BIX<V025) THEN
							BIX := V025;
						   ELSIF (BIX> V5) THEN
							BIX := V5;
						   END IF;
				          	ELSE 
					           BIX := 1.5;
					        END IF;
						IPACT := ROUND(((D.AVALUO_MUNICIPAL*BIX)/V1000),2);
						V_CONT_EN := V_CONT_EN + 1;
						TIPOS:= 'EN';
						RAISE NOTICE 'EN % ',BIX;
					ELSE 
                                                IF(D_PANT.IP_ACT<=0) THEN                                                
						    BIX := 1.5;
                                                ELSE 
                                                    BIX := ROUND((((D_PANT.IP_ACT/D.AVALUO_MUNICIPAL)*VSECTOR)*V1000),2);
                                                END IF;
						IF(BIX<V025) THEN
							BIX := V025;
						ELSIF (BIX> V5) THEN
							BIX := V5;
						END IF;
						IPACT := ROUND(((D.AVALUO_MUNICIPAL*BIX)/V1000),2);
						V_CONT_N := V_CONT_N + 1;
						TIPOS:= 'PN';
						RAISE NOTICE 'PNBIX-2 % ',BIX;
					END IF;
				END IF;
			ELSE 
			--PREDIOS NUEVOS POR CAMBIO DE GIO Y PEDRO
				--IF(VSECTOR=2) THEN
				BIX := 1.5;
				--ELSE 
				--BIX = 1.2;
				--END IF;
				IPACT := ROUND(((D.AVALUO_MUNICIPAL*BIX)/V1000),2);
				RAISE NOTICE 'NULL % ',BIX;
			END IF;
			CLOSE C_DATOS_VALORACION;
			--RAISE NOTICE 'ipact %',IPACT;
			UPDATE sgm_historico.VALORACION_PREDIAL SET
				BANDA_IMPOSITIVA = BIX,
				ID_PREDIO = D_PREDIO.ID,
				CLAVE_MZ = D_PREDIO.CLAVE_CAT,
				SNE_ACT = VSNE,
				IP_ACT = IPACT,
				IP_ANT = IPANT,
				AVSOL_ANT = AVSOLANT,
				AVEDIF_ANT = AVEDFANT,
				AVMUN_ANT = AVMUNANT,
				RB_ACT = ROUND((V015/V1000)*D.AVALUO_MUNICIPAL,2),
				EMISION_ACT = V5,
				TASA_MANT = ROUND(IPACT*V001,2)
			WHERE PERIODO = n_anio
			AND NUM_VERSION = n_codigo
			AND NUM_PREDIO = D.NUM_PREDIO;
			RESULTADO:= 1;
		END IF;
		CLOSE C_CPREDIO;
	END LOOP;
RAISE NOTICE 'VBISX % ',BIX;
RETURN RESULTADO;
END;

$function$;

ALTER FUNCTION sgm_historico.emision_individual(integer, integer, bigint)
    OWNER TO sisapp;


----------------------------------------------------
----------------------------------------------------
-- FUNCTION: sgm_historico.emision_general(integer, integer)

-- DROP FUNCTION sgm_historico.emision_general(integer, integer);

CREATE OR REPLACE FUNCTION sgm_historico.emision_general(
	nperiodo integer,
	nversion integer)
    RETURNS void
    LANGUAGE 'plpgsql'
    COST 100.0
    VOLATILE NOT LEAKPROOF 
AS $function$


DECLARE
--CURSORES
	C_AVALUOS_HIJOS CURSOR FOR SELECT * FROM sgm_historico.VALORACION_PREDIAL WHERE PERIODO = nperiodo AND NUM_VERSION = nversion;
	
	C_HIJOS CURSOR FOR SELECT * FROM sgm_app.CAT_PREDIO WHERE PHV > 0 AND PHH > 0 AND ESTADO = 'A';

	C_CPREDIO CURSOR(NPREDIO BIGINT) FOR SELECT P.*, HV.AVALUO_SOLAR, HV.AVALUO_EDIFICACION, HV.AVALUO_MUNICIPAL 
		FROM sgm_app.CAT_PREDIO P 
		INNER JOIN sgm_historico.VALORACION_PREDIAL HV ON HV.NUM_PREDIO = P.NUM_PREDIO
		WHERE P.NUM_PREDIO = NPREDIO AND P.ESTADO = 'A'
		AND HV.NUM_VERSION = NVERSION AND HV.PERIODO = NPERIODO;

	C_DATOS_VALORACION CURSOR(NPREDIO BIGINT, XPERIODO INTEGER, XVERSION INTEGER) FOR SELECT * FROM sgm_historico.VALORACION_PREDIAL PX WHERE PX.PERIODO = XPERIODO AND PX.NUM_PREDIO = NPREDIO AND PX.NUM_VERSION = XVERSION;
	
	C_PM CURSOR(NSECTOR INTEGER, NMZ INTEGER, NCDLA INTEGER, NMZDIV INTEGER, NSOLAR INTEGER, ND1 INTEGER, ND2 INTEGER, ND3 INTEGER, ND4 INTEGER, ND5 INTEGER, ND6 INTEGER, ND7 INTEGER, ND8 INTEGER, ND9 INTEGER) FOR
		SELECT P.*, HV.AVALUO_SOLAR, HV.AVALUO_EDIFICACION, HV.AVALUO_MUNICIPAL 
		FROM sgm_app.CAT_PREDIO P 
		INNER JOIN sgm_historico.VALORACION_PREDIAL HV ON HV.NUM_PREDIO = P.NUM_PREDIO AND NUM_VERSION = NVERSION AND HV.PERIODO = NPERIODO
		WHERE P.SECTOR = NSECTOR AND P.MZ = NMZ AND P.CDLA = NCDLA AND P.MZDIV = NMZDIV AND P.SOLAR = NSOLAR AND P.DIV1 = ND1 AND P.DIV2 = ND2 AND P.DIV3 = ND3 AND P.DIV4 = ND4 
		AND P.DIV5 = ND5 AND P.DIV6 = ND6 AND P.DIV7 = ND7 AND P.DIV8 = ND8 AND P.DIV9 = ND9 AND P.PHV = 0 AND P.PHH = 0 AND P.ESTADO = 'A';
	
	C_PREDIO_ENLACE CURSOR FOR SELECT E.NUM_PREDIO, EPH.CODIGO_MATRIZ FROM sgm_app.CAT_PREDIO E 
		INNER JOIN sgm_app.ENLACE_PH EPH ON EPH.NUM_PREDIO = E.NUM_PREDIO WHERE E.PHV > 0 AND E.PHH > 0;
	
	--C_CPREDIO CURSOR(NPREDIO BIGINT) FOR SELECT * FROM sgm_app.CAT_PREDIO P WHERE P.ESTADO = 'A' AND P.NUM_PREDIO = NPREDIO;

	C_DATOS_VALORACION_GENERAL CURSOR FOR SELECT * FROM sgm_historico.VALORACION_PREDIAL PX WHERE PX.NUM_VERSION = nversion AND PX.PERIODO = nperiodo AND PX.MATRIZ = FALSE ORDER BY PX.NUM_PREDIO;

	C_PREDIOS_SNE_ANT CURSOR(NPREDIO BIGINT) FOR 
		SELECT CP.NUM_PREDIO, CP.SUBSECTOR,CC.NOMBRE AS CIUDADELA, CP.AREA_SOLAR, (SELECT SUM(AREA_CONS_CENSO) FROM sgm_app.CAT_PREDIO_EDIFICACION PE WHERE PE.PREDIO = CP.ID) AS AREA_CONS
		FROM sgm_app.CAT_PREDIO CP 
			INNER JOIN sgm_app.CAT_CIUDADELA CC ON CC.ID = CP.CIUDADELA
			INNER JOIN sgm_financiero.REN_LIQUIDACION RL ON RL.PREDIO = CP.ID
			INNER JOIN sgm_financiero.REN_DET_LIQUIDACION D ON D.LIQUIDACION = RL.ID
			--INNER JOIN sgm_app.CAT_PREDIO_EDIFICACION PE ON PE.PREDIO = CP.ID
		WHERE RL.TIPO_LIQUIDACION = 13
			AND RL.ESTADO_LIQUIDACION IN (1,2)
			AND RL.ANIO = 2016
			AND D.RUBRO = 10
			AND CP.NUM_PREDIO = NPREDIO
			AND CP.AREA_SOLAR > 3000
			AND CP.ESTADO = 'A'
		ORDER BY 3 ASC;
	
--RECORDS 
	D_PMATRIZ RECORD;
	D_VALGEN RECORD;
	D_TEMP RECORD;
	D_PREDIO RECORD;
	D_PANT RECORD;
	D_PSNE RECORD;
--VARIABLES
	VMATRIZ BIGINT;
	AVAL_SOLAR NUMERIC(14,4) := 0;
	AVAL_EDIF NUMERIC(14,4) := 0;
	AVAL_MUN NUMERIC(14,4) := 0;

	V100 NUMERIC(14,4) := 100;
	V1000 NUMERIC(14,4) := 1000;
	V025 NUMERIC(14,4) := 0.25;
	V5 NUMERIC(14,4) := 5;
	V015 NUMERIC(14,4) := 0.15;
	V001 NUMERIC(14,4) := 0.01;
	BIX NUMERIC(14,4) := 0;
	VSNE NUMERIC(14,4) := 0;
	IPACT NUMERIC(14,4) := 0;
	IPANT NUMERIC(14,4) := 0;
	VSECTOR NUMERIC(14,4) :=0;
	AVSOLANT NUMERIC(14,4) := 0;
	AVEDFANT NUMERIC(14,4) := 0;
	AVMUNANT NUMERIC(14,4) := 0;

	ID_LIQ BIGINT := NULL;
	V_CONT INTEGER := 0;
	V_CONT_N INTEGER := 0;
	V_CONT_M INTEGER := 0;
	V_CONT_EN INTEGER := 0;
	TIPOS CHARACTER VARYING(20);
	
BEGIN
	RAISE NOTICE 'INICIO DEL CURSOR HIJOS ';
	FOR CH IN C_HIJOS LOOP
		SELECT CODIGO_MATRIZ INTO VMATRIZ FROM sgm_app.ENLACE_PH PH WHERE PH.NUM_PREDIO = CH.NUM_PREDIO;
		IF(VMATRIZ IS NOT NULL) THEN			
			OPEN C_CPREDIO(VMATRIZ);
			FETCH C_CPREDIO INTO D_PMATRIZ;
			IF(C_CPREDIO IS NOT NULL) THEN 
				OPEN C_DATOS_VALORACION(D_PMATRIZ.NUM_PREDIO,NPERIODO,NVERSION);
				FETCH C_DATOS_VALORACION INTO D_VALGEN;
				IF(C_DATOS_VALORACION IS NOT NULL AND D_VALGEN.NUM_PREDIO IS NOT NULL) THEN
					AVAL_SOLAR := (D_VALGEN.AVALUO_SOLAR*(CH.ALICUOTA_SAC/100));
					AVAL_EDIF := (D_VALGEN.AVALUO_EDIFICACION*(CH.ALICUOTA_SAC/100));
					AVAL_MUN := AVAL_SOLAR + AVAL_EDIF;
					INSERT INTO sgm_historico.VALORACION_PREDIAL (ID,NUM_VERSION, PERIODO, NUM_PREDIO, CLAVE_MZ, MATRIZ, SUBSECTOR, VALOR_M2_SUBSECTOR, ALICUOTA, NUMERO_MATRIZ, AVALUO_SOLAR, AVALUO_EDIFICACION, AVALUO_MUNICIPAL, FEC_CRE, CANT_SERVICIOS, AVALUO_MUNICIPAL_MATRIZ, AREA_SOLAR)
					VALUES (NEXTVAL('historico.valoracion_predial_id_seq'), NVERSION, NPERIODO, CH.NUM_PREDIO, CH.CLAVE_CAT, FALSE, D_VALGEN.SUBSECTOR, D_VALGEN.VALOR_M2_SUBSECTOR, CH.ALICUOTA_SAC/100, D_VALGEN.NUM_PREDIO, AVAL_SOLAR,AVAL_EDIF,AVAL_MUN, NOW(),D_VALGEN.CANT_SERVICIOS,D_VALGEN.AVALUO_MUNICIPAL, D_VALGEN.AREA_SOLAR*(CH.ALICUOTA_SAC/100));
					
					UPDATE sgm_historico.VALORACION_PREDIAL SET MATRIZ = TRUE WHERE NUM_VERSION = NVERSION AND PERIODO = NPERIODO AND NUM_PREDIO = D_VALGEN.NUM_PREDIO;
					V_CONT := V_CONT + 1;	
					RAISE NOTICE 'AVALUO MATRIZ % ',D_VALGEN.NUM_PREDIO||' - '||D_VALGEN.AVALUO_MUNICIPAL;
				END IF;
				CLOSE C_DATOS_VALORACION;
			END IF;
			CLOSE C_CPREDIO;
		ELSE
			AVAL_SOLAR := 0;
			AVAL_EDIF := 0;
			AVAL_MUN := 0;
			OPEN C_PM(CH.SECTOR, CH.MZ, CH.CDLA, CH.MZDIV, CH.SOLAR, CH.DIV1, CH.DIV2, CH.DIV3, CH.DIV4, CH.DIV5, CH.DIV6, CH.DIV7, CH.DIV8, CH.DIV9);
			FETCH C_PM INTO D_PMATRIZ;
			--RAISE NOTICE 'ELSE ENLACE PH ';
			IF(C_PM IS NOT NULL) THEN
				--RAISE NOTICE 'CURSOR PREDIO MATRIZ (%)',D_PMATRIZ.NUM_PREDIO;
				OPEN C_DATOS_VALORACION(D_PMATRIZ.NUM_PREDIO, NPERIODO,NVERSION);
				FETCH C_DATOS_VALORACION INTO D_VALGEN;
				IF(C_DATOS_VALORACION IS NOT NULL AND D_VALGEN.NUM_PREDIO IS NOT NULL) THEN
					--RAISE NOTICE 'EXISTE EN CONSULTA ANTERIOR (%)',D_VALGEN.NUM_PREDIO;
					AVAL_SOLAR := (D_VALGEN.AVALUO_SOLAR*(CH.ALICUOTA_SAC/100));
					AVAL_EDIF := (D_VALGEN.AVALUO_EDIFICACION*(CH.ALICUOTA_SAC/100));
					AVAL_MUN := AVAL_SOLAR + AVAL_EDIF;
					INSERT INTO sgm_historico.VALORACION_PREDIAL (ID,NUM_VERSION, PERIODO, NUM_PREDIO, CLAVE_MZ, MATRIZ, SUBSECTOR, VALOR_M2_SUBSECTOR, ALICUOTA, NUMERO_MATRIZ, AVALUO_SOLAR, AVALUO_EDIFICACION, AVALUO_MUNICIPAL, FEC_CRE,CANT_SERVICIOS,AVALUO_MUNICIPAL_MATRIZ,AREA_SOLAR)
					VALUES (NEXTVAL('historico.valoracion_predial_id_seq'), NVERSION, NPERIODO, CH.NUM_PREDIO, CH.CLAVE_CAT, FALSE, D_VALGEN.SUBSECTOR, D_VALGEN.VALOR_M2_SUBSECTOR, CH.ALICUOTA_SAC/100, D_VALGEN.NUM_PREDIO, AVAL_SOLAR,AVAL_EDIF,AVAL_MUN, NOW(),D_VALGEN.CANT_SERVICIOS,D_VALGEN.AVALUO_MUNICIPAL, D_VALGEN.AREA_SOLAR*(CH.ALICUOTA_SAC/100));
					
					UPDATE sgm_historico.VALORACION_PREDIAL SET MATRIZ = TRUE WHERE NUM_VERSION = NVERSION AND PERIODO = NPERIODO AND NUM_PREDIO = D_VALGEN.NUM_PREDIO;
					V_CONT := V_CONT + 1;
					RAISE NOTICE '2 AVALUO MATRIZ % ',D_VALGEN.NUM_PREDIO||' - '||D_VALGEN.AVALUO_MUNICIPAL;
				END IF;
				CLOSE C_DATOS_VALORACION;
			END IF;
			CLOSE C_PM;
		END IF;
		RAISE NOTICE 'HIJO.. % ',V_CONT;
	END LOOP;
	RAISE NOTICE 'TOTAL DE HIJOS CREADOS (%) ',V_CONT;
	
	---ACTUALIZACION DE LOS PREDIOS MATRICES QUE SE REFERENCIAN EN sgm_app.ENLACE_PH
	FOR V IN C_PREDIO_ENLACE LOOP
		AVAL_MUN :=0;
		OPEN C_CPREDIO(V.NUM_PREDIO);
		FETCH C_CPREDIO INTO D_PREDIO;
		IF(C_CPREDIO IS NOT NULL) THEN
			OPEN C_DATOS_VALORACION(V.CODIGO_MATRIZ);
			FETCH C_DATOS_VALORACION INTO D_VALGEN;
			IF(D_VALGEN IS NOT NULL) THEN
				OPEN C_DATOS_VALORACION(D_PREDIO.NUM_PREDIO);
				FETCH C_DATOS_VALORACION INTO D_TEMP;
				IF(D_TEMP IS NOT NULL) THEN 
					AVAL_MUN = (D_VAL_GEN.AVALUO_MUNICIPAL*(D_PREDIO.ALICUOTA_SAC/100));
					UPDATE sgm_historico.VALORACION_PREDIAL SET
						NUMERO_MATRIZ = V.CODIGO_MATRIZ,
						ALICUOTA = D_PREDIO.ALICUOTA_SAC/100,
						AVALUO_MUNICIPAL = AVAL_MUN,
						AVALUO_MUNICIPAL_MATRIZ = D_VAL_GEN.AVALUO_MUNICIPAL
					WHERE PERIODO = NPERIODO AND NUM_VERSION = NVERSION AND NUM_PREDIO = D_PREDIO.NUM_PREDIO;
				END IF;
			END IF;
			CLOSE C_DATOS_VALORACION;
		END IF;
		CLOSE C_CPREDIO;
	END LOOP;
	
	--ACTUALIZA Y CALCULA LOS AVALUOS RESPECTIVOS
	--REGISTRA LOS MOVIMIENTOS EN LAS LIQUIDACION CON LOS RUBROS PARA LA EMISION DE IMPUESTOS PREDIALES
	FOR D IN C_DATOS_VALORACION_GENERAL LOOP
		BIX := 0;
		VSNE:=0;
		IPACT:=0;
		IPANT:=0;
		AVSOLANT:=0;
		AVEDFANT:=0;
		AVMUNANT:=0;
		AVAL_SOLAR:=0;
		AVAL_EDIF:=0;
		AVAL_EDIF:=0;
		AVAL_MUN:=0;
		TIPOS:= NULL;
		OPEN C_CPREDIO(D.NUM_PREDIO);
		FETCH C_CPREDIO INTO D_PREDIO;
		IF(C_CPREDIO IS NOT NULL) THEN 
			SELECT T.FACT_ACT INTO VSECTOR FROM sgm_app.SECTOR_VALORIZACION T WHERE T.SECTOR = D_PREDIO.SUBSECTOR;
			--CALCULA EL VALOR PARA LOS SOLARES NO EDIFICADOS
			VSNE:=0;
			IF((D.AVALUO_EDIFICACION = 0 OR D.AVALUO_EDIFICACION IS NOT NULL)  AND D.NUMERO_MATRIZ IS NULL AND D.CANT_SERVICIOS > 4 AND (D_PREDIO.SECTOR > 2 AND D_PREDIO.SECTOR < 9)) THEN 				
				IF((D.AREA_SOLAR <= 3000)) THEN
					VSNE := ROUND((D.AVALUO_MUNICIPAL * 0.002),2);
					RAISE NOTICE 'SOLAR NO EDIFICADO %',VSNE;
				ELSE 
					OPEN C_PREDIOS_SNE_ANT(D_PREDIO.NUM_PREDIO);
					FETCH C_PREDIOS_SNE_ANT INTO D_PSNE;
					IF(C_PREDIOS_SNE_ANT IS NOT NULL AND (D_PSNE.AREA_CONS IS NULL OR D_PSNE.AREA_CONS = 0)) THEN
						VSNE := ROUND((D.AVALUO_MUNICIPAL * 0.002),2);
						RAISE NOTICE 'SOLAR NO EDIFICADO 2016 %',VSNE;
					END IF;
					CLOSE C_PREDIOS_SNE_ANT;
				END IF;
			END IF;
			--DATOS DEL PREDIO DE LA EMISION DEL PERIODO ANTERIOR
			OPEN C_DATOS_VALORACION(D_PREDIO.NUM_PREDIO, (NPERIODO-1),1);
			FETCH C_DATOS_VALORACION INTO D_PANT;
			IF(C_DATOS_VALORACION IS NOT NULL AND D_PANT.NUM_PREDIO IS NOT NULL) THEN
				IPANT := D_PANT.IP_ACT;
				AVSOLANT := D_PANT.AVALUO_SOLAR;
				AVEDFANT := D_PANT.AVALUO_EDIFICACION;
				AVMUNANT := D_PANT.AVALUO_MUNICIPAL;
				IF(D_PANT.AREA_CONSTRUCCION IS NOT NULL AND D_PANT.AREA_CONSTRUCCION > 0) THEN
					IF( (((TRUNC(D.AREA_CONSTRUCCION) - TRUNC(D_PANT.AREA_CONSTRUCCION))<= 250 AND (TRUNC(D.AREA_CONSTRUCCION) - TRUNC(D_PANT.AREA_CONSTRUCCION)) >= -250)) 
					OR (((TRUNC(D_PANT.AREA_CONSTRUCCION) - TRUNC(D.AREA_CONSTRUCCION))<= 250) AND (TRUNC(D_PANT.AREA_CONSTRUCCION) - TRUNC(D.AREA_CONSTRUCCION))>= -250)

					AND (((TRUNC(D.AREA_SOLAR) - TRUNC(D_PANT.AREA_SOLAR)) <=500 AND (TRUNC(D.AREA_SOLAR) - TRUNC(D_PANT.AREA_SOLAR)) >=-500) OR 
					((TRUNC(D_PANT.AREA_SOLAR) - TRUNC(D.AREA_SOLAR)) <=500 AND (TRUNC(D_PANT.AREA_SOLAR) - TRUNC(D.AREA_SOLAR)) >=-500)) 
					OR (D.ALICUOTA > 0 AND D_PANT.IP_ACT > 0)) THEN
						BIX = ROUND((((D_PANT.IP_ACT/D.AVALUO_MUNICIPAL)*VSECTOR)*V1000),2);
						IF(BIX<V025) THEN
							BIX := V025;
						ELSIF (BIX> V5) THEN
							BIX = V5;
						END IF;
						IPACT = ROUND(((D.AVALUO_MUNICIPAL*BIX)/V1000),2);
						V_CONT_N := V_CONT_N + 1;
						TIPOS:= 'PN';
					ELSE
					--CALCULO DE LA BANDA PARA LAS EDIFICACIONES NUEVAS
					--AGREGAR LOS PREDIOS DE LAS INSPECCIONES FINALES
						BIX = ROUND((((D_PANT.IP_ACT/D_PANT.AVALUO_MUNICIPAL))*V1000),2);
						IF(BIX<V025) THEN
							BIX := V025;
						ELSIF (BIX> V5) THEN
							BIX = V5;
						END IF;
						IPACT = ROUND(((D.AVALUO_MUNICIPAL*BIX)/V1000),2);
						V_CONT_M := V_CONT_M + 1;
						TIPOS:= 'M';
					END IF;
				ELSE 
				--CALCULO DE LA BANDA PARA LAS EDIFICACIONES NUEVAS
					--BIX = ((D_PANT.IP_ACT/D.AVALUO_MUNICIPAL)*VSECTOR)*V1000;
					IF(D.AREA_CONSTRUCCION > 0 AND D.NUMERO_MATRIZ IS NULL) THEN
						BIX = ROUND((((D_PANT.IP_ACT/D_PANT.AVALUO_MUNICIPAL))*V1000),2);
						IF(BIX<V025) THEN
							BIX := V025;
						ELSIF (BIX> V5) THEN
							BIX = V5;
						END IF;
						IPACT = ROUND(((D.AVALUO_MUNICIPAL*BIX)/V1000),2);
						V_CONT_EN := V_CONT_EN + 1;
						TIPOS:= 'EN';
					ELSE 
						BIX = ROUND((((D_PANT.IP_ACT/D.AVALUO_MUNICIPAL)*VSECTOR)*V1000),2);
						IF(BIX<V025) THEN
							BIX := V025;
						ELSIF (BIX> V5) THEN
							BIX = V5;
						END IF;
						IPACT = ROUND(((D.AVALUO_MUNICIPAL*BIX)/V1000),2);
						V_CONT_N := V_CONT_N + 1;
						TIPOS:= 'PN';
					END IF;
				END IF;
			ELSE 
			--PREDIOS NUEVOS POR CAMBIO DE GIO Y PEDRO
				--IF(VSECTOR=2) THEN
				BIX = 1.5;
				--ELSE 
				--BIX = 1.2;
				--END IF;
				IPACT = ROUND(((D.AVALUO_MUNICIPAL*BIX)/V1000),2);
			END IF;
			CLOSE C_DATOS_VALORACION; 
			UPDATE sgm_historico.VALORACION_PREDIAL SET
				BANDA_IMPOSITIVA = BIX,
				ID_PREDIO = D_PREDIO.ID,
				CLAVE_MZ = D_PREDIO.CLAVE_CAT,
				SNE_ACT = VSNE,
				IP_ACT = IPACT,
				IP_ANT = IPANT,
				AVSOL_ANT = AVSOLANT,
				AVEDIF_ANT = AVEDFANT,
				AVMUN_ANT = AVMUNANT,
				RB_ACT = ROUND(((V015/V1000)*D.AVALUO_MUNICIPAL),2),
				EMISION_ACT = V5,
				TASA_MANT = ROUND((IPACT*V001),2),
				TIPO = TIPOS
			WHERE PERIODO = NPERIODO
			AND NUM_VERSION = NVERSION
			AND NUM_PREDIO = D.NUM_PREDIO;
		END IF;
		CLOSE C_CPREDIO;
	END LOOP;
END;


$function$;

ALTER FUNCTION sgm_historico.emision_general(integer, integer)
    OWNER TO sisapp;

--------------------------------------------------------------
--------------------------------------------------------------
-- FUNCTION: sgm_historico.emision_individual_2(integer, integer, bigint)

-- DROP FUNCTION sgm_historico.emision_individual_2(integer, integer, bigint);

CREATE OR REPLACE FUNCTION sgm_historico.emision_individual_2(
	n_anio integer,
	n_codigo integer,
	n_predio bigint)
    RETURNS integer
    LANGUAGE 'plpgsql'
    COST 100.0
    VOLATILE NOT LEAKPROOF 
AS $function$


DECLARE
--CURSORES
	C_CPREDIO CURSOR(NPREDIO BIGINT) FOR SELECT P.*, HV.AVALUO_SOLAR, HV.AVALUO_EDIFICACION, HV.AVALUO_MUNICIPAL 
		FROM sgm_app.CAT_PREDIO P 
		INNER JOIN sgm_historico.VALORACION_PREDIAL HV ON HV.NUM_PREDIO = P.NUM_PREDIO
		WHERE P.NUM_PREDIO = NPREDIO AND P.ESTADO = 'A'
		AND HV.NUM_VERSION = n_codigo AND HV.PERIODO = n_anio;

	C_DATOS_VALORACION CURSOR(NPREDIO BIGINT, XPERIODO INTEGER) FOR SELECT * FROM sgm_historico.VALORACION_PREDIAL PX WHERE PX.PERIODO = XPERIODO AND PX.NUM_PREDIO = NPREDIO;
	
	C_PM CURSOR(NSECTOR INTEGER, NMZ INTEGER, NCDLA INTEGER, NMZDIV INTEGER, NSOLAR INTEGER, ND1 INTEGER, ND2 INTEGER, ND3 INTEGER, ND4 INTEGER, ND5 INTEGER, ND6 INTEGER, ND7 INTEGER, ND8 INTEGER, ND9 INTEGER) FOR
		SELECT P.*, HV.AVALUO_SOLAR, HV.AVALUO_EDIFICACION, HV.AVALUO_MUNICIPAL 
		FROM sgm_app.CAT_PREDIO P 
		INNER JOIN sgm_historico.VALORACION_PREDIAL HV ON HV.NUM_PREDIO = P.NUM_PREDIO AND NUM_VERSION = n_codigo AND HV.PERIODO = n_anio
		WHERE P.SECTOR = NSECTOR AND P.MZ = NMZ AND P.CDLA = NCDLA AND P.MZDIV = NMZDIV AND P.SOLAR = NSOLAR AND P.DIV1 = ND1 AND P.DIV2 = ND2 AND P.DIV3 = ND3 AND P.DIV4 = ND4 
		AND P.DIV5 = ND5 AND P.DIV6 = ND6 AND P.DIV7 = ND7 AND P.DIV8 = ND8 AND P.DIV9 = ND9 AND P.PHV = 0 AND P.PHH = 0 AND P.ESTADO = 'A';
	
	C_PREDIO_ENLACE CURSOR FOR SELECT E.NUM_PREDIO, EPH.CODIGO_MATRIZ FROM sgm_app.CAT_PREDIO E 
		INNER JOIN sgm_app.ENLACE_PH EPH ON EPH.NUM_PREDIO = E.NUM_PREDIO WHERE E.PHV > 0 AND E.PHH > 0;
	
	--C_CPREDIO CURSOR(NPREDIO BIGINT) FOR SELECT * FROM sgm_app.CAT_PREDIO P WHERE P.ESTADO = 'A' AND P.NUM_PREDIO = NPREDIO;

	C_DATOS_VALORACION_GENERAL CURSOR FOR SELECT * FROM sgm_historico.VALORACION_PREDIAL PX WHERE PX.NUM_VERSION = n_codigo AND PX.PERIODO = n_anio AND PX.MATRIZ = FALSE AND PX.NUM_PREDIO = n_predio;

	C_PREDIOS_SNE_ANT CURSOR(NPREDIO BIGINT) FOR 
		SELECT CP.NUM_PREDIO, CP.SUBSECTOR,CC.NOMBRE AS CIUDADELA, CP.AREA_SOLAR, (SELECT SUM(AREA_CONS_CENSO) FROM sgm_app.CAT_PREDIO_EDIFICACION PE WHERE PE.PREDIO = CP.ID) AS AREA_CONS
		FROM sgm_app.CAT_PREDIO CP 
			INNER JOIN sgm_app.CAT_CIUDADELA CC ON CC.ID = CP.CIUDADELA
			INNER JOIN sgm_financiero.REN_LIQUIDACION RL ON RL.PREDIO = CP.ID
			INNER JOIN sgm_financiero.REN_DET_LIQUIDACION D ON D.LIQUIDACION = RL.ID
			--INNER JOIN sgm_app.CAT_PREDIO_EDIFICACION PE ON PE.PREDIO = CP.ID
		WHERE RL.TIPO_LIQUIDACION = 13
			AND RL.ESTADO_LIQUIDACION IN (1,2)
			AND RL.ANIO = 2016
			AND D.RUBRO = 10
			AND CP.NUM_PREDIO = NPREDIO
			AND CP.AREA_SOLAR > 3000
			AND CP.ESTADO = 'A'
		ORDER BY 3 ASC;
	
--RECORDS 
	D_PMATRIZ RECORD;
	D_VALGEN RECORD;
	D_TEMP RECORD;
	D_PREDIO RECORD;
	D_PANT RECORD;
	D_PSNE RECORD;
--VARIABLES
	RESULTADO INTEGER :=0;
	VMATRIZ BIGINT;
	AVAL_SOLAR NUMERIC(14,4) := 0;
	AVAL_EDIF NUMERIC(14,4) := 0;
	AVAL_MUN NUMERIC(14,4) := 0;

	V100 NUMERIC(14,4) := 100;
	V1000 NUMERIC(14,4) := 1000;
	V025 NUMERIC(14,4) := 0.25;
	V5 NUMERIC(14,4) := 5;
	V015 NUMERIC(14,4) := 0.15;
	V001 NUMERIC(14,4) := 0.01;
	BIX NUMERIC(14,4) := 0;
	VSNE NUMERIC(14,4) := 0;
	IPACT NUMERIC(14,4) := 0;
	IPANT NUMERIC(14,4) := 0;
	VSECTOR NUMERIC(14,4) :=0;
	AVSOLANT NUMERIC(14,4) := 0;
	AVEDFANT NUMERIC(14,4) := 0;
	AVMUNANT NUMERIC(14,4) := 0;

	ID_LIQ BIGINT := NULL;
	V_CONT INTEGER := 0;
	V_CONT_N INTEGER := 0;
	V_CONT_M INTEGER := 0;
	V_CONT_EN INTEGER := 0;
	TIPOS CHARACTER VARYING(20);
	
BEGIN
	--ACTUALIZA Y CALCULA LOS AVALUOS RESPECTIVOS
	--REGISTRA LOS MOVIMIENTOS EN LAS LIQUIDACION CON LOS RUBROS PARA LA EMISION DE IMPUESTOS PREDIALES
	FOR D IN C_DATOS_VALORACION_GENERAL LOOP
		BIX := 0;
		VSNE:=0;
		IPACT:=0;
		IPANT:=0;
		AVSOLANT:=0;
		AVEDFANT:=0;
		AVMUNANT:=0;
		AVAL_SOLAR:=0;
		AVAL_EDIF:=0;
		AVAL_EDIF:=0;
		AVAL_MUN:=0;
		TIPOS:= NULL;
		OPEN C_CPREDIO(D.NUM_PREDIO);
		FETCH C_CPREDIO INTO D_PREDIO;
		IF(C_CPREDIO IS NOT NULL) THEN 
			SELECT T.FACT_ACT INTO VSECTOR FROM sgm_app.SECTOR_VALORIZACION T WHERE T.SECTOR = D_PREDIO.SUBSECTOR;
			--RAISE NOTICE 'FACT_ACT % ',VSECTOR;
			--CALCULA EL VALOR PARA LOS SOLARES NO EDIFICADOS
			VSNE:=0;
			IF((D.AVALUO_EDIFICACION = 0 OR D.AVALUO_EDIFICACION IS NULL)  AND D.NUMERO_MATRIZ IS NULL AND D.CANT_SERVICIOS > 4 AND (D_PREDIO.SECTOR > 2 AND D_PREDIO.SECTOR < 9)) THEN 				
				IF((D.AREA_SOLAR <= 3000)) THEN
					VSNE := ROUND((D.AVALUO_MUNICIPAL * 0.002),2);
					RAISE NOTICE 'SOLAR NO EDIFICADO %',VSNE;
				ELSE 
					OPEN C_PREDIOS_SNE_ANT(D_PREDIO.NUM_PREDIO);
					FETCH C_PREDIOS_SNE_ANT INTO D_PSNE;
					IF(C_PREDIOS_SNE_ANT IS NOT NULL AND (D_PSNE.AREA_CONS IS NULL OR D_PSNE.AREA_CONS = 0)) THEN
						VSNE := ROUND((D.AVALUO_MUNICIPAL * 0.002),2);
						RAISE NOTICE 'SOLAR NO EDIFICADO 2016 %',VSNE;
					END IF;
					CLOSE C_PREDIOS_SNE_ANT;
				END IF;
			END IF;
			--DATOS DEL PREDIO DE LA EMISION DEL PERIODO ANTERIOR
			OPEN C_DATOS_VALORACION(D_PREDIO.NUM_PREDIO, (n_anio-1));
			FETCH C_DATOS_VALORACION INTO D_PANT;
			IF(C_DATOS_VALORACION IS NOT NULL AND D_PANT.NUM_PREDIO IS NOT NULL) THEN
				IPANT := D_PANT.IP_ACT;
				AVSOLANT := D_PANT.AVALUO_SOLAR;
				AVEDFANT := D_PANT.AVALUO_EDIFICACION;
				AVMUNANT := D_PANT.AVALUO_MUNICIPAL;
					--OR (D.ALICUOTA > 0 AND D_PANT.IP_ACT > 0)) THEN
				IF(D.ALICUOTA > 0 AND D_PANT.IP_ACT > 0) THEN
					BIX := ROUND((((D_PANT.IP_ACT/D.AVALUO_MUNICIPAL)*VSECTOR)*V1000),2);
					IF(BIX<V025) THEN
						BIX := V025;
					ELSIF (BIX> V5) THEN
						BIX := V5;
					END IF;
					IPACT := ROUND((D.AVALUO_MUNICIPAL*BIX/V1000),2);
					V_CONT_N := V_CONT_N + 1;
					TIPOS:= 'PN';
					RAISE NOTICE 'PNALIC % ',BIX||' IPACT '||IPACT||'  AVALUO '||D.AVALUO_MUNICIPAL;
					RAISE NOTICE 'PNBIX % ',BIX;
					ELSE 
					BIX := ROUND((((D_PANT.IP_ACT/D.AVALUO_MUNICIPAL)*VSECTOR)*V1000),2);
					IF(BIX<V025) THEN
						BIX := V025;
					ELSIF (BIX> V5) THEN
						BIX := V5;
					END IF;
						IPACT := ROUND((D.AVALUO_MUNICIPAL*BIX/V1000),2);
						V_CONT_N := V_CONT_N + 1;
						RAISE NOTICE 'CXXX %',D_PANT.NUM_VERSION;
                                END IF;
			ELSE 
			--PREDIOS NUEVOS POR CAMBIO DE GIO Y PEDRO
				--IF(VSECTOR=2) THEN
				BIX := 1.5;
				--ELSE 
				--BIX = 1.2;
				--END IF;
				IPACT := ROUND(((D.AVALUO_MUNICIPAL*BIX)/V1000),2);
				RAISE NOTICE 'NULL % ',BIX;
			END IF;
			CLOSE C_DATOS_VALORACION;
			--RAISE NOTICE 'ipact %',IPACT;
			UPDATE sgm_historico.VALORACION_PREDIAL SET
				BANDA_IMPOSITIVA = BIX,
				ID_PREDIO = D_PREDIO.ID,
				CLAVE_MZ = D_PREDIO.CLAVE_CAT,
				SNE_ACT = VSNE,
				IP_ACT = IPACT,
				IP_ANT = IPANT,
				AVSOL_ANT = AVSOLANT,
				AVEDIF_ANT = AVEDFANT,
				AVMUN_ANT = AVMUNANT,
				RB_ACT = ROUND((V015/V1000)*D.AVALUO_MUNICIPAL,2),
				EMISION_ACT = V5,
				TASA_MANT = ROUND(IPACT*V001,2)
			WHERE PERIODO = n_anio
			AND NUM_VERSION = n_codigo
			AND NUM_PREDIO = D.NUM_PREDIO;
			RESULTADO:= 1;
		END IF;
		CLOSE C_CPREDIO;
	END LOOP;
RAISE NOTICE 'VBISX % ',BIX;
RETURN RESULTADO;
END;

$function$;

ALTER FUNCTION sgm_historico.emision_individual_2(integer, integer, bigint)
    OWNER TO sisapp;
